version: '3'

services:

  auth-service:
    build:
      context: ./../auth-service
      dockerfile: ./../auth-service/auth-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"


  broker-service:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1


  client-service:
    build:
      context: ./../client-service
      dockerfile: ./../client-service/client-service.dockerfile
    restart: always
    ports:
      - "3000:80"
    deploy:
      mode: replicated
      replicas: 1      


  file-service:
    build:
      context: ./../file-service
      dockerfile: ./../file-service/file-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=files sslmode=disable timezone=UTC connect_timeout=5"
    volumes:
      - ./db-data/files/:/files/

  logger-service:
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      

  postgres:
    image: 'postgres:14.0'
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: files
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/    
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  mongo:
    image: 'mongo:4.2.16-bionic'
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db
